Para a implementação do interpretador, as tarefas necessárias para a interpretagção, do código fonte ao resultado final de uma computação, foram divididas entre três módulos: o Compilador, a Máquina Virtual e o Sistema de Gerência de Memória.

O Compilador delega a primeira etapa da compilação para o Leitor, um elemento tradicional na implementação de linguagens da família Lisp, que é responsável por traduzir o código em formato textual fornecido pelo usuário para Expressões-S. Durante a fase de leitura é realizada a análise léxica, bem como a formação das listas que compõe a estrutura de um programa Scheme, que corresponde a parte da análise sintática.

Utilizando as Expressões-S geradas pelo Leitor, identifica qual estrutura da linguagem cada Expressão-S representa, reconhece instâncias de macros que devem ser traduzidas para as definições dadas pelo usuário e finalmente gera o código que deve ser executado para avaliação das expressões fornecidas. Como a tradução de macros acontece antes da geração de código, esta fase fica significativamente mais simples, precisando apenas lidar com as poucas estruturas primitivas que a linguagem define, deixando as demais para serem reduzidas às estruturas primitivas por meio de macros. Na seção 3.2 são fornecidos mais detalhes sobre o Compilador, bem como seus sub-módulos: o Leitor e o Sistema de Macros.

A Máquina Virtual, então, é encarregada de avaliar as operações codificadas em instruções básicas, utilizando o código gerado pelo compilador, e retornar o valor desta avaliação. Para tanto, esta depende de um contexto de execução, composto das ligações presentes no escopo global. Informações extras de contexto, como os escopos locais e estado da pilha de controle, entre outras, são mantidas e serão discutidas, junto com uma descrição detalhada da Máquina Virtual, na seção 3.3.

Uma representação simplificada do interpretador, então, pode ser feita como na figura ${fig:visao-geral-implementacao}.

${do-fig:visao-geral-implementacao}

Os módulos descritos acima são implementados sobre o sistema de Gerência de Memória. A Gerência de Memória é baseada em uma implementação simples do algoritmo de Mark & Sweep [17], em que a memória livre é armazenada como uma lista encadeada de nós de memória de tamanho único (neste caso, 12 bytes). Com a ajuda de um conhecimento mais íntimo da máquina virtual em questão, o sistema de gerência de memória pode então, quando necessário, identificar quais nós de memória estão em uso e liberar para uso posterior todos os demais. Na seção 3.1 detalharemos o sistema de memória, embora uma compreensão completa do mesmo só seja possível após indicarmos quais partes da máquina virtual estão envolvidas no processo de identificar quais nós de memória estão em uso.

