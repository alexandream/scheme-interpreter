######################################################################
####    MEMORY USAGE AND POINTER ALIGNMENT - 2011-04-05 00:42     ####
######################################################################

XX Been dealing with the problem of having one bit for signaling "immutable"
XX values for a while, one thing that just popped in the head was that I *could*
XX use more than 4 bits of mask without actually increasing the size of a cell if
XX I aligned it to a bigger value than it's size.

XX All I'd have to do is to tag on both ends, saving the upper end for, as an
XX example, storing garbage collection information. That way it seems like I can
XX effectively use less bits for a pointer.

The above is not going to work, unless I add the extra bits in the MIDDLE of
the pointer, which is kinda weird. The reason is that I can't use alignment on
the bottom to free more bits (presumably from the top) without wasting as much
space as the alignment.

The only way in which I believe I can free an extra bit of the pointer mask is
if I do weird things such as allocating aligned with, say, 64KB, but only
allocating 32KB, therefore one bit would truly be unused in there, but I'd have
to divide the actual pointer value in two pieces.

